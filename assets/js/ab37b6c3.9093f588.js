"use strict";(self.webpackChunkOpenRefine_Documentation=self.webpackChunkOpenRefine_Documentation||[]).push([[5824],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),s=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),d=s(n),f=a,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,o(o({ref:e},c),{},{components:n})):r.createElement(m,o({ref:e},c))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3591:(t,e,n)=>{n.r(e),n.d(e,{contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={title:"Other distributions",description:"Tweaked versions of OpenRefine distributed by other vendors.",hide_table_of_contents:!0},p="Other distributions",s={type:"mdx",permalink:"/new-openrefine-website/distributions",source:"@site/src/pages/distributions.md",title:"Other distributions",description:"Tweaked versions of OpenRefine distributed by other vendors.",frontMatter:{title:"Other distributions",description:"Tweaked versions of OpenRefine distributed by other vendors.",hide_table_of_contents:!0}},c=[],u={toc:c};function d(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"other-distributions"},"Other distributions"),(0,i.kt)("p",null,"The following distributions have been customized for a specific usage or integration with other technologies. "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Distribution"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Authors"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/opendatatrentino/OpenDataRise"},"OpenDataRise")),(0,i.kt)("td",{parentName:"tr",align:null},"Tool to cleanse and semantify datasets from CKAN repositories. Based on OpenRefine."),(0,i.kt)("td",{parentName:"tr",align:null},"Open Data in Trentino")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/fusepoolP3/p3-batchrefine"},"p3-batchrefine")),(0,i.kt)("td",{parentName:"tr",align:null},"BatchRefine adds batch processing capabilities to OpenRefine and support multiple back end including spark"),(0,i.kt)("td",{parentName:"tr",align:null},"SpazioDati")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/andreybratus/RefineOnSpark"},"RefineOnSpark")),(0,i.kt)("td",{parentName:"tr",align:null},"RefineOnSpark is a driver program to run OpenRefine jobs on the Spark cluster"),(0,i.kt)("td",{parentName:"tr",align:null},"SpazioDati")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/RBGKew/Reconciliation-and-Matching-Framework"},"Reconciliation-and-Matching-Framework")),(0,i.kt)("td",{parentName:"tr",align:null},"A framework to allow the matching of string entities using customised sets of transformations and matchers, plus a tool to produce the necessary configurations and another to expose them as OpenRefine reconciliation services."),(0,i.kt)("td",{parentName:"tr",align:null},"RBGKew")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://www.ontotext.com/products/ontotext-refine/"},"Ontotext Refine")),(0,i.kt)("td",{parentName:"tr",align:null},"Ontotext Refine, previously called OntoRefine, is a closed-source data transformation tool based on OpenRefine. It can be used for converting tabular data to RDF using a visual mapper or SPARQL, exporting it as Turtle or importing it to a GraphDB repository directly, using SPARQL queries against a virtual endpoint of Refine data."),(0,i.kt)("td",{parentName:"tr",align:null},"Ontotext")))))}d.isMDXComponent=!0}}]);