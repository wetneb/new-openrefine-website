"use strict";(self.webpackChunkOpenRefine_Documentation=self.webpackChunkOpenRefine_Documentation||[]).push([[1959],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=s.createContext({}),p=function(e){var t=s.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return s.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return n?s.createElement(h,r(r({ref:t},u),{},{components:n})):s.createElement(h,r({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var s=n(7462),a=n(3366),i=(n(7294),n(3905)),r=(n(4996),["components"]),l={id:"functional-tests",title:"Functional tests",sidebar_label:"Functional tests"},o=void 0,p={unversionedId:"technical-reference/functional-tests",id:"version-3.6/technical-reference/functional-tests",title:"Functional tests",description:"Introduction",source:"@site/versioned_docs/version-3.6/technical-reference/functional-tests.md",sourceDirName:"technical-reference",slug:"/technical-reference/functional-tests",permalink:"/new-openrefine-website/docs/technical-reference/functional-tests",draft:!1,editUrl:"https://github.com/OpenRefine/OpenRefine/edit/master/docs/versioned_docs/version-3.6/technical-reference/functional-tests.md",tags:[],version:"3.6",lastUpdatedBy:"Antonin Delpeuch",lastUpdatedAt:1662887291,formattedLastUpdatedAt:"Sep 11, 2022",frontMatter:{id:"functional-tests",title:"Functional tests",sidebar_label:"Functional tests"},sidebar:"version-3.6/docs",previous:{title:"Translate OpenRefine's documentation",permalink:"/new-openrefine-website/docs/technical-reference/translating-docs"},next:{title:"Maintainer guidelines",permalink:"/new-openrefine-website/docs/technical-reference/maintainer-guidelines"}},u={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Cypress brief overview",id:"cypress-brief-overview",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"1. Install Cypress",id:"1-install-cypress",level:3},{value:"2. Start the test runner",id:"2-start-the-test-runner",level:3},{value:"3. Run the existing tests",id:"3-run-the-existing-tests",level:3},{value:"4. Add your first test",id:"4-add-your-first-test",level:3},{value:"Tests technical documentation",id:"tests-technical-documentation",level:2},{value:"A typical test",id:"a-typical-test",level:3},{value:"Testing guidelines",id:"testing-guidelines",level:3},{value:"Testing utilities",id:"testing-utilities",level:3},{value:"Browsers",id:"browsers",level:3},{value:"Folder organization",id:"folder-organization",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Overriding with a cypress.env.json file",id:"overriding-with-a-cypressenvjson-file",level:4},{value:"Command-line",id:"command-line",level:4},{value:"Visual testing",id:"visual-testing",level:3},{value:"When a visual test fails",id:"when-a-visual-test-fails",level:4},{value:"CI/CD",id:"cicd",level:2},{value:"Resources",id:"resources",level:2}],d={toc:c};function m(e){var t=e.components,l=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,s.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"OpenRefine interface is tested with the ",(0,i.kt)("a",{parentName:"p",href:"https://www.cypress.io/"},"Cypress framework"),".",(0,i.kt)("br",{parentName:"p"}),"\n","With Cypress, tests are performing assertions using a real browser, the same way a real user would use the software."),(0,i.kt)("p",null,"Cypress tests can be ran"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"using the Cypress test runner (development mode)"),(0,i.kt)("li",{parentName:"ul"},"using a command line (CI/CD mode)")),(0,i.kt)("p",null,"If you are writing tests, the Cypress test runner is good enough, and the command-line is mainly used by the CI/CD platform (Github actions)"),(0,i.kt)("h2",{id:"cypress-brief-overview"},"Cypress brief overview"),(0,i.kt)("p",null,"Cypress operates insides a browser, it's internally using NodeJS.\nThat's a key difference with tools such as Selenium."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"From the Cypress documentation:")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"But what this also means is that your test code ",(0,i.kt)("strong",{parentName:"p"},"is being evaluated inside the browser"),". Test code is not evaluated in Node, or any other server side language. The ",(0,i.kt)("strong",{parentName:"p"},"only")," language we will ever support is the language of the web: JavaScript.")),(0,i.kt)("p",null,"Good starting points with Cypress are the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/getting-started/writing-your-first-test.html#Write-your-first-test"},"Getting started guide"),", and the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/references/trade-offs.html#Permanent-trade-offs-1"},"Trade-offs")),(0,i.kt)("p",null,"The general workflow of a Cypress test is to"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Start a browser (yarn run cypress open)"),(0,i.kt)("li",{parentName:"ul"},"Visit a URL"),(0,i.kt)("li",{parentName:"ul"},"Trigger user actions"),(0,i.kt)("li",{parentName:"ul"},"Assert that the DOM contains expected texts and elements using selectors")),(0,i.kt)("h2",{id:"getting-started"},"Getting started"),(0,i.kt)("p",null,"If this is the first time you use Cypress, it is recommended for you to get familiar with the tool."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.cypress.io/guides/overview/why-cypress.html"},"Cypress overview")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://example.cypress.io/"},"Cypress examples of tests and syntax"))),(0,i.kt)("h3",{id:"1-install-cypress"},"1. Install Cypress"),(0,i.kt)("p",null,"You will need:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org"},"Node.js 10 or 12 and above")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://yarnpkg.com/"},"Yarn or NPM")),(0,i.kt)("li",{parentName:"ul"},"A Unix/Linux shell environment or the Windows command line")),(0,i.kt)("p",null,"To install Cypress and dependencies, run :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd ./main/tests/cypress\nyarn install\n")),(0,i.kt)("h3",{id:"2-start-the-test-runner"},"2. Start the test runner"),(0,i.kt)("p",null,"The test runner assumes that OpenRefine is up and running on the local machine, the tests themselves do not launch OpenRefine, nor restarts it."),(0,i.kt)("p",null,"Start OpenRefine with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./refine\n")),(0,i.kt)("p",null,"Then start Cypress"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"yarn --cwd ./main/tests/cypress run cypress open\n")),(0,i.kt)("h3",{id:"3-run-the-existing-tests"},"3. Run the existing tests"),(0,i.kt)("p",null,"Once the test runner is up, you can choose to run one or several tests by selecting them from the interface.",(0,i.kt)("br",{parentName:"p"}),"\n","Click on one of them and the test will start."),(0,i.kt)("h3",{id:"4-add-your-first-test"},"4. Add your first test"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add a ",(0,i.kt)("inlineCode",{parentName:"li"},"test.spec.js")," into the ",(0,i.kt)("inlineCode",{parentName:"li"},"main/tests/cypress/cypress/integration")," folder."),(0,i.kt)("li",{parentName:"ul"},"The test is instantly available in the list"),(0,i.kt)("li",{parentName:"ul"},"Click on the test"),(0,i.kt)("li",{parentName:"ul"},"Start to add some code")),(0,i.kt)("h2",{id:"tests-technical-documentation"},"Tests technical documentation"),(0,i.kt)("h3",{id:"a-typical-test"},"A typical test"),(0,i.kt)("p",null,"A typical OpenRefine test starts with the following code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"it('Ensure cells are blanked down', function () {\n  cy.loadAndVisitProject('food.mini');\n  cy.get('.viewpanel-sorting a').contains('Sort').click();\n  cy.get('.viewpanel').should('to.contain', 'Something');\n});\n")),(0,i.kt)("p",null,"The first noticeable thing about a test is the description (",(0,i.kt)("inlineCode",{parentName:"p"},"Ensure cells are blanked down"),"), which describes what the test is doing.",(0,i.kt)("br",{parentName:"p"}),"\n","Lines usually starts with ",(0,i.kt)("inlineCode",{parentName:"p"},"cy.something..."),", which is the main way to interact with the Cypress framework."),(0,i.kt)("p",null,"A few examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cy.get('a.my-class')")," will retrieve the ",(0,i.kt)("inlineCode",{parentName:"li"},'<a class="my-class" />')," element"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cy.click()")," will click on the element"),(0,i.kt)("li",{parentName:"ul"},"eventually, ",(0,i.kt)("inlineCode",{parentName:"li"},"cy.should()")," will perform an assertion, for example that the element contains an expected text with ",(0,i.kt)("inlineCode",{parentName:"li"},"cy.should('to.contains', 'my text')"))),(0,i.kt)("p",null,"On top of that, OpenRefine contributors have added some functions for common OpenRefine interactions.\nFor example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cy.loadAndVisitProject")," will create a fresh project in OpenRefine"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cy.assertCellEquals")," will ensure that a cell contains a given value")),(0,i.kt)("p",null,"See below on the dedicated section 'Testing utilities'"),(0,i.kt)("h3",{id:"testing-guidelines"},"Testing guidelines"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cy.wait")," should be used in the last resort scenario. It's considered a bad practice, though sometimes there is no other choice"),(0,i.kt)("li",{parentName:"ul"},"Tests should remain isolated from each other. It's best to try one feature at the time"),(0,i.kt)("li",{parentName:"ul"},"A test should always start with a fresh project"),(0,i.kt)("li",{parentName:"ul"},"The name of the files should mirror the OpenRefine UI organization")),(0,i.kt)("h3",{id:"testing-utilities"},"Testing utilities"),(0,i.kt)("p",null,"OpenRefine contributors have added some utility methods on the top of the Cypress framework.\nThose methods perform some common actions or assertions on OpenRefine, to avoid code duplication."),(0,i.kt)("p",null,"Utilities can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress/support/commands.js"),"."),(0,i.kt)("p",null,"The most important utility method is ",(0,i.kt)("inlineCode",{parentName:"p"},"loadAndVisitProject"),".",(0,i.kt)("br",{parentName:"p"}),"\n","This method will create a fresh OpenRefine project based on a dataset given as a parameter.",(0,i.kt)("br",{parentName:"p"}),"\n","The fixture parameter can be"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"An arbitrary array, the first row is for the column names, other rows are for the values",(0,i.kt)("br",{parentName:"p"}),"\n","Use an arbitrary array ",(0,i.kt)("strong",{parentName:"p"},"only")," if the test requires some specific grid values",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const fixture = [\n  ['Column A', 'Column B', 'Column C'],\n  ['0A', '0B', '0C'],\n  ['1A', '1B', '1C'],\n  ['2A', '2B', '2C'],\n];\ncy.loadAndVisitProject(fixture);\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A referenced dataset: ",(0,i.kt)("inlineCode",{parentName:"p"},"food.small")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"food.mini"),(0,i.kt)("br",{parentName:"p"}),"\n","Most of the time, tests does not require any specific grid values",(0,i.kt)("br",{parentName:"p"}),"\n","Use food.mini as much as possible, it loads 2 rows and very few columns in the grid",(0,i.kt)("br",{parentName:"p"}),"\n","Use food.small if the test requires a few hundred rows in the grid"),(0,i.kt)("p",{parentName:"li"},"Those datasets live in ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress/fixtures")))),(0,i.kt)("h3",{id:"browsers"},"Browsers"),(0,i.kt)("p",null,"In terms of browsers, Cypress is using what is installed on your operating system.\nSee the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/guides/launching-browsers.html#Browsers"},"Cypress documentation")," for a list of supported browsers"),(0,i.kt)("h3",{id:"folder-organization"},"Folder organization"),(0,i.kt)("p",null,"Tests are located in ",(0,i.kt)("inlineCode",{parentName:"p"},"main/tests/cypress/cypress")," folder.\nThe test should not use any file outside the cypress folder."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/fixtures")," contains CSVs and OpenRefine project files used by the tests"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/integration")," contains the tests"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/plugins")," contains custom plugins for the OR project"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/screenshots")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"/videos")," contains the recording of the tests, Git ignored"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/support")," is a custom library of assertion and common user actions, to avoid code duplication in the tests themselves")),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Cypress execution can be configured with environment variables, they can be declared at the OS level, or when running the test"),(0,i.kt)("p",null,"Available variables are"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"OPENREFINE_URL, determine on which scheme://url:port to access OpenRefine, default to http://localhost:333"),(0,i.kt)("li",{parentName:"ul"},"DISABLE_PROJECT_CLEANUP, If set to 1, projects will not be deleted after each run. Default to 0 to keep the OpenRefine instance clean")),(0,i.kt)("p",null,"Cypress contains ",(0,i.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/guides/environment-variables.html#Setting"},"exaustive documentation")," about configuration, but here are two simple ways to configure the execution of the tests:"),(0,i.kt)("h4",{id:"overriding-with-a-cypressenvjson-file"},"Overriding with a cypress.env.json file"),(0,i.kt)("p",null,"This file is ignored by Git, and you can use it to configure Cypress locally"),(0,i.kt)("h4",{id:"command-line"},"Command-line"),(0,i.kt)("p",null,"You can pass variables at the command-line level"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'yarn --cwd ./main/tests/cypress run cypress open --env OPENREFINE_URL="http://localhost:1234"\n')),(0,i.kt)("h3",{id:"visual-testing"},"Visual testing"),(0,i.kt)("p",null,"Tests generally ensure application behavior by making assertions against the DOM, to ensure specific texts or css attributes are present in the document body.",(0,i.kt)("br",{parentName:"p"}),"\n","Visual testing, on the contrary, is a way to test applications by comparing images.\nA reference screenshot is taken the first time the test runs, and subsequent runs will compare a new screenshot against the reference, at the pixel level."),(0,i.kt)("p",null,"Here is an ",(0,i.kt)("a",{parentName:"p",href:"https://docs.cypress.io/plugins/directory#visual-testing"},"introduction to visual testing by Cypress"),"."),(0,i.kt)("p",null,"In some cases, we are using visual testing.",(0,i.kt)("br",{parentName:"p"}),"\n","We are using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jaredpalmer/cypress-image-snapshot"},"Cypress Image Snapshot")),(0,i.kt)("p",null,"Identified cases are so far:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"testing images created by OpenRefine backend (scatterplots for example)")),(0,i.kt)("p",null,"Reference screenshots (Called snapshots), are stored in /cypress/snapshots.\nAnd a snapshot can be taken for the whole page, or just a single part of the page."),(0,i.kt)("h4",{id:"when-a-visual-test-fails"},"When a visual test fails"),(0,i.kt)("p",null,"First, Cypress will display the following error message:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Diff image when a visual test fails",src:n(2301).Z,width:"500",height:"184"})),(0,i.kt)("p",null,"Then, a diff image will be created in /cypress/snapshots, this directory is ignored by Git.",(0,i.kt)("br",{parentName:"p"}),"\n","The diff images shows the reference image on the left, the image that was taken during the test run on the right, and the diff in the middle."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Diff image when a visual test fails",src:n(4186).Z,width:"500",height:"153"})),(0,i.kt)("h2",{id:"cicd"},"CI/CD"),(0,i.kt)("p",null,"In CI/CD, tests are run headless, with the following command-line"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./refine ui_test chrome\n")),(0,i.kt)("p",null,"Results are displayed in the standard output"),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/guides/command-line.html#Installation"},"Cypress command line options"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://example.cypress.io/"},"Lots of good Cypress examples")))}m.isMDXComponent=!0},4186:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/failed-visual-test-ccb6e467b538f73c5303f10e3d51cb53.png"},2301:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/visual-test-cypress-failure-dbfb18976d4a89de1224ca42b868d3d4.png"}}]);